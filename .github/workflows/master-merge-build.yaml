name: Build and Push Changed Services

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for full git history

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Detect changed service folders
        id: changes
        run: |
          echo "🔍 Detecting changes..."

          BASE_SHA="${{ github.event.before }}"
          HEAD_SHA="${{ github.sha }}"

          # Fallback if base commit is missing
          if ! git cat-file -e "$BASE_SHA^{commit}"; then
            echo "⚠️ Base commit missing, using HEAD^ as fallback"
            BASE_SHA=$(git rev-parse "$HEAD_SHA^")
          fi

          git diff --name-only "$BASE_SHA" "$HEAD_SHA" |
            grep -E '^services/[^/]+/|^gateway/[^/]+/' |
            cut -d/ -f1-2 | sort -u > changed_dirs.txt || true

          echo "Changed directories:"
          cat changed_dirs.txt || echo "None"

          echo "dirs=$(paste -sd "," changed_dirs.txt)" >> $GITHUB_OUTPUT

      - name: Build and push changed Docker images
        if: steps.changes.outputs.dirs != ''
        run: |
          IFS=',' read -ra DIRS <<< "${{ steps.changes.outputs.dirs }}"
          for DIR in "${DIRS[@]}"; do
            echo "🔧 Building image for $DIR"
            
            VERSION_FILE="$DIR/VERSION"
            if [[ ! -f "$VERSION_FILE" ]]; then
              echo "❌ VERSION file missing in $DIR. Skipping..."
              continue
            fi

            VERSION=$(cat "$VERSION_FILE" | tr -d '\n')
            IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/vinaysheelsagar.com-$(basename $DIR):$VERSION"

            echo "📦 Building and pushing $IMAGE_NAME"

            docker build -t "$IMAGE_NAME" "$DIR"
            docker push "$IMAGE_NAME"
          done
